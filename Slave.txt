;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Wed Feb 7 2024
; Processor: PIC16F877A
; Compiler:  MPASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p16f877a.inc                ; Include register definition file

;====================================================================
; VARIABLES
;====================================================================
NumberOne EQU 0x20
NumberTwo EQU 0x30
Result EQU 0x40
Temp EQU 0x60
Hunds EQU 0x70
Tens EQU 0x71
Ones EQU 0x72
;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
RST   code  0x0 
      goto  Start

;====================================================================
; CODE SEGMENT
;====================================================================

PGM   code
Start
      NOP 
      BANKSEL TRISC 
      MOVLW 0XFF
      MOVWF TRISC
      ;; PORT C IS INPUT (SERIAL COMMUNICATION)
      ;; PORT D IS OUTPUTS(LEDS)
      BANKSEL TRISD
      CLRF TRISD 
      
      BANKSEL TRISB
      CLRF TRISB
      
      BANKSEL PORTD
      CLRF PORTD
      CLRF PORTB
      CLRF Hunds
      CLRF Tens
      CLRF Ones
     
      ; Write your code here

Loop  
      NOP
      BTFSC PORTC, 7 
      GOTO finishNumberOne
      goto  Loop
 
finishNumberOne      
      MOVF PORTC, W
      MOVWF NumberOne
      BCF NumberOne, 7
      
NumTwoLoop
      BTFSS PORTC, 7
      GOTO Done
      GOTO NumTwoLoop
      
Done      
      MOVF PORTC, W 
      MOVWF NumberTwo
      
      ;; Small Delay (Could Be Replaced by a delay function)
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP	
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      
      BANKSEL TRISC 
      CLRF TRISC  	; Reverse Direction of Port Cs  
      CLRF PORTC
     
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Work On Multiplication Here (Change From Addition To Mul) ;;;;;;;;;;;;;;;;
      ;;;;;;;;; NumberOne (00-99)
      ;;;;;;;; NumberTwo (0-9)
      ;;;;;;;;; Multiply & Put Hundreds, Tens & Units into Hunds, Tens & Ones
      BANKSEL PORTA
      CLRF Temp
      CLRF Result
      CLRF Hunds
      CLRF Tens
      CLRF Ones
      ;;; APPROACH: Do a multiplication (summing Loop) & every iteration, check if the reesult is over a 100, if it is, subtract 100 & increment hunds
      
      ; NUMBER = 10, NUMBER2= 2
      ;MOVF NumberTwo,W
      ;MOVWF PORTD
      
        
      MOVWF NumberTwo 
      ;check if number two =0 ; END MUL
      MOVF NumberTwo,W
      BTFSC STATUS, Z
      GOTO EndMul
      
      MOVF NumberOne,W
      ;MOVWF PORTD
    
      
L1
      MOVF Result, W
      ADDWF NumberOne, W ;;; Add 0-99 to W
      BTFSS STATUS, C 	;;;;; If carry is clear -> GOTO (Skip Incrementations)
      GOTO DontIncrement
      INCF Hunds 	;;; If Carry is SET (Skipped GOTO) -> Add 2 to hundreds, 5 to Tens, 6 to Ones.
      INCF Hunds
      
      INCF Tens
      INCF Tens
      INCF Tens
      INCF Tens
      INCF Tens
      
      INCF Ones
      INCF Ones
      INCF Ones
      INCF Ones 
      INCF Ones
      INCF Ones
DontIncrement

      MOVWF Result ;;; store current multiplication result
      DECF NumberTwo, F
      MOVF NumberTwo, W
      XORLW 0x00
      BTFSC STATUS, Z
      GOTO EndMul
      GOTO L1
      
EndMul      
      MOVF Result, W
      MOVLW Tens
      MOVWF PORTD
     
      
      ;;; ATP Result has the result of multiplication without considering overflows
      ;;; -> extract Hundreds, Tens & Ones from a 0-255 Number & Add em onto correct register
      ;;; Dr. Hanna Code
; Calclulate hundreds......................................

		BSF		STATUS,C	; set carry for subtract
		MOVLW	D'100'		; load 100
sub1		SUBWF	Result,1		; and subtract from result
		INCF	Hunds		; count number of loops
		BTFSC	STATUS,C	; and check if done
		GOTO	sub1		; no, carry on

		ADDWF	Result,1		; yes, add 100 back on
		DECF	Hunds		; and correct loop count

; Calculate tens digit.....................................

		BSF		STATUS,C	; repeat process for tens
		MOVLW	D'10'		; load 10
sub2		SUBWF	Result		; and subtract from result
		INCF	Tens		; count number of loops
		BTFSC	STATUS,C	; and check if done
		GOTO	sub2		; no, carry on

		ADDWF	Result		; yes, add 100 back on
		DECF	Tens		; and correct loop count
		MOVF	Result,W		; load remainder
		ADDWF	Ones,F		; and store as ones digit
		
		
	 ;;; Final Step: For every 10  In Ones, Increment Tens THEN for every 10 in Tens, Increment Hundreds


OnesLoop
    MOVLW   D'10'       
    SUBWF   Ones,F     ; Subtract 10 from Ones
    BTFSS   STATUS, C   ; If carry is SET => Ones is 0-9 => GOTO (Re-Add 10 & Exit)
    GOTO    OnesLoop_Exit   
    INCF    Tens
    GOTO    OnesLoop    ; Go to Tens loop
OnesLoop_Exit
    MOVLW D'10'
    ADDWF Ones, F

TensLoop
	
    MOVLW   D'10'     
    SUBWF   Tens, F    
    BTFSS   STATUS, C  
    GOTO    TensLoop_Exit
    INCF Hunds 
    GOTO    TensLoop  
TensLoop_Exit
    MOVLW D'10'
    ADDWF Tens, F
    
    
    ;;; Hundreds , Tens , Units each in a register!
    
    
     CLRW
     ADDWF Hunds, W
     ADDWF Hunds, W
     ADDWF Hunds, W
     ADDWF Hunds, W
     ADDWF Hunds, W
     
     ADDWF Hunds, W
     ADDWF Hunds, W
     ADDWF Hunds, W
     ADDWF Hunds, W
     ADDWF Hunds, W
     
     ADDWF Tens, W 		;;; 375 -> 3*10 + 7 = 37 
     
     ;; 04 * 10
     ;;0
     

      ;MOVWF PORTD
	    
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     MOVWF PORTC
     ;PRINT AT LED
     ;MOVWF PORTD
     BSF PORTC, 7
     
     NOP 
     NOP
     NOP
     NOP
     NOP
     NOP
     NOP
     
     MOVF Ones,W
     ;MOVWF PORTD
     MOVWF PORTC
     BCF PORTC, 7 
 

ENDLESSLOOP
      GOTO ENDLESSLOOP
;====================================================================
      END
